1. 정렬 알고리즘 
	1.1) 안정 정렬 : 같은 수의 원본이 앞에 있으면 그 수는 정렬 후에도 앞에 존재
		- 버블 정렬 : 자료를 특정 기준에 의해 작은 값부터 큰 값 혹은 그 반대의 순서로 자리를 바꿔가며 재배열
 		- 카운팅 정렬 : 배열을 인덱스 기준으로 집계 -> 누적합으로 인덱스 지정(안정 정렬) -> 뒤에서 부터 배치 정렬  

	1.2) 불안정 정렬 : 같은 수의 원본이 앞에 있는 것과 상관 없이 무작위로 정렬 
		- 선택 정렬 : 하나의 수를 선택하여 다음 수를 연속적으로 확인하여 정렬 

	1.3) Arrays 메소드 - lexicographic (사전식 정렬)
		- 오름차순 배열 정렬 : Arrays.sort( 배열 ) 
		- 역방향 배열 정렬 : Arrays.sort( 배열 , Collections.reverseOrder())
		- 기준점을 잡고 정렬 - Comparator 인터페이스 compare 함수 Overriding

		Arrays.sort(nums, new Comparator<int[]>() {
		            @Override
		            public int compare(int[] o1, int[] o2) {
		                if (o1[0] != o2[0]) 
                		    return o1[0] - o2[0]; 
		                else
		                    return o1[1] - o2[1]; 		            
			     }
	        });

	* 정렬 활용 ) 활동 선택 (정렬 + 그리디): 백준 1931번 / 좌표 정렬하기 1, 2 / 프로그래머스 단속 카메라 / 

2. 트리 순회, 힙 자료구조 
	* 이진탐색 : 정렬이 된 자료에 데이터를 /2 로 연산하여 탐색하는 알고리즘으로 logN의 시간복잡도가 소요 백준 2805번

	2.1) 트리 > 이진트리 (노드 자식 : 2개 이하) > 완전 이진트리(왼쪽 노드 자식 부터 채워야 한다. - 인덱싱이 가능) > 힙 (최소, 최대 힙)

	2.2) 최소 힙 PriorityQueue : 들어온 순서대로 데이터가 나가는 것이 아닌 데이터의 우선순위 대로 먼저 나가는 자료구조 
		1. 첫번째 값을 반환하고 제거 후 비어있다면 null
		priorityQueue.poll();

		2. 첫번째 값 제거 후 비어있다면 예외 발생
		priorityQueue.remove(); 

		3. 첫번째 값을 반환만 하고 제거 하지는 않는다.
		* 큐가 비어있다면 null을 반환
		priorityQueue.peek();

		4. 첫번째 값을 반환만 하고 제거 하지는 않는다.
		* 큐가 비어있다면 예외 발생
		priorityQueue.element();

		5. 초기화
		priorityQueue.clear();      

		6. 출력에 대해 정렬을 하진 않음 (단, 남을때 까지 poll() 시 데이터 정렬은 된다)

		* 프로그래머스 신입사원 교육 / 백준 : 1927번, 11279번

3. 비트 연산 - 외톨이 숫자 찾기 (커스텀 문제)
	int[] nums = {1, 2, 3, 2, 1}; // 3을 골라야함.
        int[] nums = {33, 25, 5, 2, 4, 25, 77, 2, 33, 4, 5}; // 77을 골라야함

        int answer = 0;

        // 1. 비트연산으로 푸는 방법 
        for(int i=1; i<nums.length; i++){
            answer ^= nums[i];
        }

        // 2. 배열의 정렬로 푸는 방법
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            if(i % 2 == 0) answer = nums[i];
            else {
                if(answer != nums[i]) {
                    break;
                }
            }

        }

        System.out.println(answer);
