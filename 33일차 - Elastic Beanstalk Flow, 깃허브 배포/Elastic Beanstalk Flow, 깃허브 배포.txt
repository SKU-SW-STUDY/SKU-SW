Elastic Beanstalk 생성 Flow 

1. Elastic Beanstalk : RDS / EC2 시스템을 포함하고 있는 Paas 
	1-1) 애플리케이션 생성

	1-2) IAM 사용자 권한 생성 ( Elastic Beanstalk / EC2 각각의 사용자 권한이 필요)

	1-3) 환경 생성 > IAM 부여 ( EC2 키페어 포함은 선택 ) / RDS 생성 

	1-4) 생성된 도메인으로 접속 확인 

	1-5) 업로드 및 배포 / Jar 파일로 배포

	1-6) 로그 파일로 서비스 확인  

	* Elastic Beanstalk 는 기본적으로 포트 5000 으로 프록시 구성되어 5000 포트를 보안규칙에 추가 해줘야 한다.

Github Action CI/CD 배포 Flow

2. Github Action : 빌드 배포 자동화 
	2-1) 로컬 컴퓨터에 Git 설치 

	2-2) 사용자 이름 / 이메일 주소 설정 
		- git config --global user.name "깃허브 아이디"
		- git config --global user.email "깃허브 이메일 주소"

	2-3) 로컬 SSH 키 생성 
		1. ssh-keygen -t rsa -C "깃허브 이메일 주소"
		2. /.ssh/id__rsa 에 pub 파일 생성 완료 
		3. 복사 후 github setting > SSH and GPG keys 에 Key 붙여넣기 후 생성 
		4. CI/CD를 위한 연동 완료 

	2-4) 깃허브 Repository 생성 하고 코드 푸시 
		Repository 생성 -> SSH 부분 복사 

	2-5) 올리려는 Repository 경로 가서 코드 푸시 작업 진행 
		1. git init (초기화) 
		2. git remote add origin [SSH 접속을 위한 복사 경로] 연결 
		3. git remote -v : 저장소 연결 확인 
		4. git pull origin main : Repository / 브런치 동기화 
		5. git branch -M main (현재 작업중인 브랜치명을 main으로 변경)
		6. git push -u origin main : 브랜치 push / -u : 로컬 브랜치와 원격 브랜치 사이의 연결 설정, 최초 1회 진행
		
	2-6) workflows 폴더 안 ci.yml 생성하여 실행환경 설정 하기 
		- 어느 branch를 실행하고 어떤 작업이 진행될 때 배포할지 조건 설정 

	2-7) Elastic Beanstalk 액세스 아이디 / 시크릿 키 설정하기 
		1. AWS
			- IAM 정책권한 등록하여 사용자 생성
			- 액세스 키, 시크릿키 발급

		2. github 
			- AWS 에서 발급받은 액세스 키 / 시크릿 키 등록
			- Setting > Secrets and variables	

	2-8) application.yml 파일에 민감한 정보 제외하기 
		- github Setting 의 secrets 안에 key-value 형태로 만들어 properties 파일의 내용을 관리 
		- ci.yml 파일에 배포 시 properties 파일 생성하는 환경설정 작성 

		touch ./src/main/resources/application.properties
		    - run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties
		    - run: cat ./src/main/resources/application.properties

	2-9) Push 할때마다 배포 되는지 확인 
		- Push 후 Github Action 에서 Build 되며 Build 중에서는 기존 서비스가 종료되지 않고 유지되며 Build 가 완료되면 서비스가 변경된다.			